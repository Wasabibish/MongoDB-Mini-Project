# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from tkinter import dialog
from PyQt5 import QtCore, QtGui, QtWidgets
import test_mongoDB as mdb


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1000,500)   
        self.widget = QtWidgets.QWidget(Dialog)
        self.widget.setGeometry(QtCore.QRect(0, 0, 1200, 1000))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setMinimumSize(QtCore.QSize(0, 0))
        self.widget.setMaximumSize(QtCore.QSize(1200, 16777215))
        self.widget.setStyleSheet("background-color: rgb(63, 62, 66);\n"
"")
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(250, 100, 611, 100))
        self.label.setStyleSheet("font: 28pt \"MS Shell Dlg 2\";\n"
"color :rgb(232, 231, 213);\n"
"background-color: transparent; \n"
"border-color: rgb(63, 160, 55); \n"
)
        self.label.setObjectName("label")
        self.line = QtWidgets.QFrame(self.widget)
        self.line.setGeometry(QtCore.QRect(320, 200, 400, 16))
        self.line.setStyleSheet("color: rgb(193, 190, 188);")
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setGeometry(QtCore.QRect(640, 330, 191, 51))
        self.pushButton.setStyleSheet("QPushButton:!pressed{\n"
"background-color: rgb(63, 160, 55);\n"
"border-radius : 10px;\n"
"border: 2px solid rgb(63, 160, 55);\n"
"}\n"
"\n"
"QPushButton:hover:!pressed\n"
"{\n"
"  border: 2px solid rgb(77, 179, 61);\n"
"\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"background-color: rgb(63, 160, 55);\n"
"border-radius : 10px;\n"
"border: 2px solid rgb(63, 160, 55);\n"
"}")
        self.pushButton.setObjectName("pushButton")
        self.comboBox = QtWidgets.QComboBox(self.widget)
        self.comboBox.setGeometry(QtCore.QRect(640, 270, 190, 51))
        self.comboBox.setStyleSheet("background-color: rgb(63, 160, 55);\n"
"border-radius : 10px;")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("Question9")
        self.comboBox.addItem("Question10")
        self.comboBox.addItem("Question11")
        self.comboBox.addItem("Question12")
        self.comboBox.addItem("Question13")
        self.comboBox.addItem("Question14")
        self.comboBox.addItem("Question15")






        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.widget)
        self.plainTextEdit.setGeometry(QtCore.QRect(220, 230, 391, 61))
        self.plainTextEdit.setStyleSheet("border-color: rgb(63, 160, 55);\n"
"border-radius : 10px;\n"
"border: 2px solid rgb(63, 160, 55);\n"
"\n"
"color : rgb(193, 190, 188);")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.widget)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(220, 300, 391, 110))
        self.plainTextEdit_2.setStyleSheet("border-color: rgb(63, 160, 55);\n"
"border-radius : 10px;\n"
"border: 2px solid rgb(63, 160, 55);\n"
"\n"
"color : rgb(193, 190, 188);")
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.frame_2 = QtWidgets.QFrame(self.widget)
        self.frame_2.setGeometry(QtCore.QRect(10, -40, 81, 80))
        self.frame_2.setStyleSheet("border-radius : 40px;\n"
"border: 2px solid rgb(63, 160, 55);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.frame_3 = QtWidgets.QFrame(self.widget)
        self.frame_3.setGeometry(QtCore.QRect(930, 350, 81, 80))
        self.frame_3.setStyleSheet("border-radius : 40px;\n"
"border: 2px solid rgb(63, 160, 55);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.frame_4 = QtWidgets.QFrame(self.widget)
        self.frame_4.setGeometry(QtCore.QRect(-10, -20, 81, 80))
        self.frame_4.setStyleSheet("border-radius : 40px;\n"
"border: 2px solid rgb(232, 231, 213);\n"
"")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.frame_5 = QtWidgets.QFrame(self.widget)
        self.frame_5.setGeometry(QtCore.QRect(180, 20, 81, 80))
        self.frame_5.setStyleSheet("border-radius : 40px;\n"
"border: 2px solid rgb(63, 160, 55);")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.frame_6 = QtWidgets.QFrame(self.widget)
        self.frame_6.setGeometry(QtCore.QRect(30, 390, 81, 80))
        self.frame_6.setStyleSheet("border-radius : 40px;\n"
"border: 2px solid rgb(232, 231, 213);\n"
"")
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.frame_7 = QtWidgets.QFrame(self.widget)
        self.frame_7.setGeometry(QtCore.QRect(950, 170, 81, 80))
        self.frame_7.setStyleSheet("border-radius : 40px;\n"
"border: 2px solid rgb(232, 231, 213);\n"
"")
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.frame_8 = QtWidgets.QFrame(self.widget)
        self.frame_8.setGeometry(QtCore.QRect(-60, 230, 81, 80))
        self.frame_8.setStyleSheet("border-radius : 40px;\n"
"border: 2px solid rgb(63, 160, 55);")
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(420, 189, 211, 16))
        self.label_2.setStyleSheet("\n"
"color :rgb(232, 231, 213);\n"
"background-color: transparent; \n"
"border-color: rgb(63, 160, 55);")
        self.label_2.setObjectName("label_2")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Projet MongoDB"))
        self.label.setText(_translate("Dialog", "Projet BDA : MongoDB"))
        self.pushButton.setText(_translate("Dialog", "Reset"))
        self.pushButton.clicked.connect(self.button_click)
        self.comboBox.setItemText(0, _translate("Dialog", "Choisir votre question"))
        self.comboBox.setItemText(1, _translate("Dialog", "Question1"))
        self.comboBox.setItemText(2, _translate("Dialog", "Question2"))
        self.comboBox.setItemText(3, _translate("Dialog", "Question3"))
        self.comboBox.setItemText(4, _translate("Dialog", "Question4"))
        self.comboBox.setItemText(5, _translate("Dialog", "Question5"))
        self.comboBox.setItemText(6, _translate("Dialog", "Question6"))
        self.comboBox.setItemText(7, _translate("Dialog", "Question7"))
        self.comboBox.setItemText(8, _translate("Dialog", "Question8"))
        self.plainTextEdit.setPlainText(_translate("Dialog", "Votre question sera affichee ici.."))
        self.plainTextEdit_2.setPlainText(_translate("Dialog", "Votre reponse sera affichee ici.."))
        self.label_2.setText(_translate("Dialog", "DJEGHALI et MOUSSI"))
        self.comboBox.currentIndexChanged.connect(self.combotest)


    def combotest(self):
        text = self.comboBox.currentText()

        if (text == "Question1"):

                self.plainTextEdit.setPlainText("Déterminer le nombre exact de pays")
                answer = mdb.qst1()
                self.plainTextEdit_2.setPlainText("Le nombre exact de pays : "+str(answer))

        if (text == "Question2"):

                self.plainTextEdit.setPlainText("Lister les différents continents")
                answer = mdb.qst2()
                joined = "\n". join(answer)
                self.plainTextEdit_2.setPlainText("Les continents : "+joined)
                    
        if (text == "Question3"):

                self.plainTextEdit.setPlainText("Lister les informations de l’Algérie")
                answer = mdb.qst3()
                self.plainTextEdit_2.setPlainText("Les infos de l'Algerie : "+str(answer))

        if (text == "Question4"):

                self.plainTextEdit.setPlainText("Lister les pays du continent Africain, ayant une population inférieure à 100000 habitants")
                answer = mdb.qst4()
                joined = "\n". join(answer)

                self.plainTextEdit_2.setPlainText("Les pays : "+joined)

        if (text == "Question5"):

                self.plainTextEdit.setPlainText("Lister les pays indépendant du continent océanique")
                answer = mdb.qst5()
                joined = "\n". join(answer)

                self.plainTextEdit_2.setPlainText("Les pays indépendant : "+joined)

        if (text == "Question6"):

                self.plainTextEdit.setPlainText("Quel est le plus gros continent en termes de surface ?")
                answer = mdb.qst6()
                #joined = "\n".join(answer)
                self.plainTextEdit_2.setPlainText("Le plus gros continent : "+str(answer))

        if (text == "Question7"):

                self.plainTextEdit.setPlainText("Donner par continents le nombre de pays, la population totale et en bonus le nombre de paysndépendant.")
                answer = mdb.qst7()
                ans = []
                for i in answer:
                        for j in i :
                                ans.append(i[j])
 
                self.plainTextEdit_2.setPlainText(str(ans))

        if (text == "Question8"):

                self.plainTextEdit.setPlainText("Donner la population totale des villes d’Algérie")
                answer = mdb.qst8()
                for d in answer:
                        print(" ")
                        for key in d:
                                if (key=="Population_Totale"):
                                       answer = d[key]

                self.plainTextEdit_2.setPlainText("La population des villes d'Algérie : "+str(answer))

        if (text == "Question9"):

                self.plainTextEdit.setPlainText("Donner la capitale (nom et population) d’Algérie")
                answer = mdb.qst9()
                ans = []
                for i in answer:
                        for j in i :
                                ans.append(i[j])
 
                self.plainTextEdit_2.setPlainText(str(ans))

        if (text == "Question10"):

                self.plainTextEdit.setPlainText("Quelles sont les langues parlées dans plus de 15 pays")
                answer = mdb.qst10()
                ans = []
                for i in answer:
                        for j in i :
                                ans.append(i[j])
 
                self.plainTextEdit_2.setPlainText(str(ans))

        if (text == "Question11"):

                self.plainTextEdit.setPlainText("Calculer pour chaque pays le nombre de villes (au moins 100)")
                answer = mdb.qst11()
                for i in answer:
                        for j in i :
                                ans = i[j]
                self.plainTextEdit_2.setPlainText(str(answer))

        if (text == "Question12"):

                self.plainTextEdit.setPlainText("Lister les 10 villes les plus habitées, ainsi que leur pays, dans l’ordre décroissant de la population")
                answer = mdb.qst12()
                for i in answer:
                        for j in i :
                                ans = i[j]
                self.plainTextEdit_2.setPlainText(str(answer))
        
        if (text == "Question13"):

                self.plainTextEdit.setPlainText("Lister les pays pour lesquels l’Arabe est une langue officielle")
                answer = mdb.qst13()
                ans = []
                for i in answer:
                        for j in i :
                                ans.append(i[j])
                
                self.plainTextEdit_2.setPlainText(str(ans))

        if (text == "Question14"):

                self.plainTextEdit.setPlainText("Lister les 5 pays avec le plus de langues parlées")
                answer = mdb.qst14()
                ans = []
                for i in answer:
                        for j in i :
                                ans.append(i[j])
                
                self.plainTextEdit_2.setPlainText(str(ans))

        if (text == "Question15"):

                self.plainTextEdit.setPlainText("Lister les pays pour lesquels la somme des populations des villes est supérieure à la population du pays.")
                answer = mdb.qst15()
                ans = []
                for i in answer:
                        ans.append(i)
   
                
                self.plainTextEdit_2.setPlainText(str(ans))

        



    def button_click(self):
        self.plainTextEdit.setPlainText("Votre question sera affichee ici..")
        self.plainTextEdit_2.setPlainText("Votre reponse sera affichee ici..")

        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    
    
    sys.exit(app.exec_())
